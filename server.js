const express = require('express');
const cors = require('cors');
const axios = require('axios');
const path = require('path');
const nodemailer = require('nodemailer');

const app = express();
const PORT = process.env.PORT || 5000; // Use PORT from environment or default to 5000

// API Key for Google PageSpeed Insights
const apiKey = process.env.PAGE_SPEED_API_KEY || 'AIzaSyDLCLJNTfjl5aLZuH_zGLnZ7eKyHRGRCE8';
const apiUrl = 'https://www.googleapis.com/pagespeedonline/v5/runPagespeed';

app.use(cors()); // Allow all origins
app.use(express.json());

// Route for PageSpeed Insights
app.get('/pagespeed', async (req, res) => {
  const { url } = req.query;

  if (!url) {
    return res.status(400).json({ error: 'URL is required' });
  }

  try {
    const encodedUrl = encodeURIComponent(url);

    // Fetch mobile data
    const mobileResponse = await axios.get(`${apiUrl}?url=${encodedUrl}&key=${apiKey}&category=performance&category=accessibility&category=best-practices&category=seo&strategy=mobile`);
    const mobileData = mobileResponse.data;

    if (!mobileResponse.status === 200) {
      return res.status(500).json({ error: mobileData.error.message || 'Error fetching mobile data from PageSpeed Insights' });
    }

    // Fetch desktop data
    const desktopResponse = await axios.get(`${apiUrl}?url=${encodedUrl}&key=${apiKey}&category=performance&category=accessibility&category=best-practices&category=seo&strategy=desktop`);
    const desktopData = desktopResponse.data;

    if (!desktopResponse.status === 200) {
      return res.status(500).json({ error: desktopData.error.message || 'Error fetching desktop data from PageSpeed Insights' });
    }

    // Send both mobile and desktop data
    res.json({
      mobile: mobileData,
      desktop: desktopData,
    });

  } catch (error) {
    console.error("Error fetching PageSpeed Insights:", error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Route to fetch the source code, robots.txt, sitemap.xml, and a 404 page from a URL
app.get('/proxy-fetch', async (req, res) => {
  const { url } = req.query;

  if (!url) {
    return res.status(400).json({ error: 'URL is required' });
  }

  try {
    const mainResponse = await axios.get(url);

    const parsedUrl = new URL(url);
    const domain = `${parsedUrl.protocol}//${parsedUrl.hostname}`;

    const robotsResponse = await axios.get(`${domain}/robots.txt`).catch(() => ({ data: null }));
    const sitemapResponse = await axios.get(`${domain}/sitemap.xml`).catch(() => ({ data: null }));
    const page404Response = await axios.get(`${domain}/non-existent-page`).catch(err => {
      if (err.response && err.response.status === 404) {
        return { data: err.response.data };
      } else {
        return { data: null };
      }
    });

    // Return all fetched data
    res.json({
      sourceCode: mainResponse.data,
      robots: robotsResponse.data || 'No /robots.txt found',
      sitemap: sitemapResponse.data || 'No /sitemap.xml found',
      page404: page404Response.data || 'No 404 page found',
    });

  } catch (error) {
    console.error('Error fetching URL:', error.message);
    res.status(500).json({ error: 'Failed to fetch the source code' });
  }
});


const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: 'kunaldgtlmart@gmail.com', // Your email address
    pass: 'qzxb eaba iovo vubu',  // Your email password (or app-specific password for Gmail)
  },
});

app.post('/send-email', (req, res) => {
  const { name, phone, email } = req.body;

  const mailOptions = {
    from: 'kunaldgtlmart@gmail.com',
    to: 'contact@dgtlmart.com',
    subject: 'SEO Audit Contact - DGTLmart',
    html: `

    <div style="font-family: Arial, sans-serif; font-size: 14px; color: #333; line-height: 1.6; background-color: #f9f9f9; padding: 20px; border: 1px solid #ddd; border-radius: 8px;">
        <table style="width: 100%; border-collapse: collapse;">
          <tr>
            <td style="color: #3bbce0; font-size: 18px; font-weight: bold; padding-bottom: 10px;">New Form Submission</td>
          </tr>
          <tr>
            <td style="padding: 8px 0;"><strong>Name:</strong> ${name}</td>
          </tr>
          <tr>
            <td style="padding: 8px 0;"><strong>Phone:</strong> ${phone}</td>
          </tr>
          <tr>
            <td style="padding: 8px 0;"><strong>Email:</strong> ${email}</td>
          </tr>
          <tr>
            <td style="padding-top: 20px; font-size: 12px; color: #888; border-top: 1px solid #ddd;">
              This email was automatically generated by your web app. Please do not reply.
            </td>
          </tr>
        </table>
      </div>
    `,
  };

  transporter.sendMail(mailOptions, (err, info) => {
    if (err) {
      console.error('Error sending email:', err);
      return res.status(500).send('Failed to send email');
    }
    res.status(200).send('Email sent successfully');
  });
});

// Start the server
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});
